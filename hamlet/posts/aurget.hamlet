%h3 About

%p

  A simple pacman-like interface to the AUR written in bash.

%p

  Aurget is designed to make the AUR convenient and speed up tedious 
  actions.  The user can decide to search, download, build, and/or 
  install packages through a dynamically created config file or by 
  passing arguments on the commandline.

%p

  The user can also choose to edit all or no PKGBUILDs, and enable or 
  disable auto dependency resolution through the same means.

%p

  Checking dependencies comes with risks because PKGBUILDs need to be 
  sourced.  Please, if you're worried about this, be sure to view all 
  PKGBUILDs before proceeding or use the config file or commandline 
  options to disable this check from occurring and remove any associated 
  risk. You have been warned.  

%h3 Usage

%p

  The screenshot:

%p

  %img.fixed!src="/static/screenshots/aurget.png"!id="aurget"!alt="Aurget Screenshot"

%p

  The help

%pre.white
  \
  \ usage: aurget [ -v | -h | -S* [ --options ] [ -- ] &lt;arguments&gt; ]
  \
  \
  \   options:
  \
  \
  \         -S  &lt;package&gt;   process &lt;package&gt; using your default sync_mode
  \
  \
  \         -Sd &lt;package&gt;   download &lt;package&gt;
  \
  \         -Sb &lt;package&gt;   download and build &lt;package&gt;
  \
  \         -Sy &lt;package&gt;   download, build, and install &lt;package&gt;
  \
  \
  \         -Su             process available upgrades using your default sync_mode
  \
  \
  \         -Sdu            download available upgrades
  \
  \         -Sbu            download and build available upgrades
  \
  \         -Syu            download, build, and install available upgrades
  \
  \
  \         -Ss  &lt;term&gt;     search aur for &lt;term&gt;
  \
  \         -Ssq &lt;term&gt;     search aur for &lt;term&gt;, print only package names
  \
  \         -Sp  &lt;package&gt;  print the PKGBUILD for &lt;package&gt;
  \
  \         -Si  &lt;package&gt;  print extended info for &lt;package&gt;
  \
  \
  \         --devel         used with -Su to upgrade all development packages
  \
  \
  \         --deps          resolve dependencies
  \
  \         --nodeps        don't resolve dependencies
  \
  \
  \         --edit          prompt to edit all pkgbuilds
  \
  \         --noedit        don't prompt to edit any pkgbuilds
  \
  \
  \         --discard       discard source files after building
  \
  \         --nodiscard     don't discard source files after building
  \
  \
  \         --nocolor       disable colorized output
  \
  \         --noconfirm     auto-answer y to all prompts
  \
  \
  \         --ignore '&lt;package&gt; &lt;package&gt; &lt;...&gt;'
  \
  \                         add additional packages to be ignored
  \
  \
  \         --mopt '-opt -opt ...'
  \
  \                         add additional options to the build command
  \
  \
  \         --popt '-opt -opt ...'
  \
  \                         add additional options to the install command
  \
  \
  \         -v, --version   display version info
  \
  \         -h, --help      display this
  \
  \
  \         --option=value  set config &lt;option&gt; as &lt;value&gt; for this run only
  \


%h3 Installation

%p

  Install the AUR package 

  %a!href="http://aur.archlinux.org/packages.php?ID=31933" here

  \.

%h3 Known bugs

%p

  If you pass an aur package before one of its dependencies as the 
  targets to aurget, it will not reorder the targets and the 
  installation will probably fail on the first package. Accounting for 
  this would require a lot of unneeded code. The makepkg error will tell 
  you the dep is not satisfied and it's easy enough to adjust your 
  targets and run it again.

%p

  Some aur packages report a bad url to their tarball in the JSON 
  interface.  Aurget checks the downloaded file, if it's not a valid 
  archive it will try 

  %code http://aur.archlinux.org/packages/$$PACK/$$PACK.tar.gz
  
  \ as a fallback. If neither the JSON url nor the fallback url provide 
  a valid archive, well, there's not much I can do.

%p

  If a package contains more than one PKGBUILD, the script (as of v1.2-2) 
  assumes the first PKGBUILD found (the 'nearest' to ./) is the one you want to 
  use to build. This may or may not be the best approach but I've yet to 
  determine why multiple PKGBUILDs would be needed for a package -- thanks to 
  Henrique Abreu for this fix.
