%p

  One of my favorite modules from xmonad-contrib is the 
  
  %a!href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Layout-IM.html" IM layout
  
  \. It's a tiling algorithm designed to handle your roster and chat 
  windows in the best way possible. Here I'm going to outline how I set 
  this up in my 
  
  %code xmonad.hs

  \.

%h3 What it looks like

%p

  Personally, I want my roster tiled in its own properly sized location on one 
  side, and all other IM related windows floating. I also want any of those IM 
  windows to automatically be pushed to the IM workspace.

%p

  %a!href="/static/screenshots/xmonad_im_layout.png"
    %img.centered!src="/static/screenshots/xmonad_im_layout-thumb.png"!id="im-layout"!alt="IM Layout Screenshot"

%p

  Here we can see that my roster is fit in its own little tile on the 
  left, sized properly. The rest of the screen is tiled as a grid of 
  whatever other applications I open. My chat window is always floating.  
%p

  So, how would you set this up?

%h3 Imports and Main

%p

  This post assumes you've imported the required modules and you have a 

  %code main = do

  \ block setup as shown:

#script
  %script!src="http://gist.github.com/627355.js"

%h3 The Layout Hook

%p

  Here's a simple layoutHook that adds the IM extension on a specific 
  workspace and has the added bonus that you can cycle between all of 
  your "standard" layouts in the space that's not taken up by the 
  roster.

%p

  Also, if your IM client isn't open, the workspace will behave like any 
  other.

#script
  %script!src="http://gist.github.com/627361.js"

%p

  I've defined the function standardLayouts, which we'll use on all workspaces. 
  Then for "3-im", I define imLayout which uses the withIM modifier.

%p

  This really highlights what XMonad brings as a WM, something you don't get 
  with any other tilers; because we are using haskell as the config language, we 
  have all of these native tricks at our disposal. And most importantly, it can 
  handle these kinds of 'hacks' without any decrease in speed or stability, 
  mainly because it's not a 'hack' at all, it's haskell.

%p

  Now you should have a nice IM layout setup, go ahead and M-q, then head to 
  workspace 3 (or whatever) and fire up your IM client 

%p

  Feel free to stop here if you plan on having your IM Chat windows 
  tiled. I think that's kind of ugly, so I choose to have any IM-related 
  window 

  %em besides

  \ the roster float by default. My manageHook takes care of that.

%h3 The Manage Hook

#script
  %script!src="http://gist.github.com/627373.js"

%p

  The truth is in the comments. This will move all IM windows to the IM 
  workspace, and float anything that's of the IM Class but not the 
  roster's Role.

%p.note

  You can use the commandline tool 

  %code xprop

  \ to find out a windows properties for use in these manageHooks.
