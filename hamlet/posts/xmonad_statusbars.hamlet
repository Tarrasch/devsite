%p

  One of the trickiest things for a new user of XMonad is adding a 
  statusbar. This is mainly because xmonad's statusbar support is so 
  transparent and extensible, that any documentation for setting it up 
  could be completely different from any other. Do you want a 
  dynamicLog? A customLog? xmobar? dzen? One bar? Two?

%p

  Here I'll outline my method. Two separate dzen2 bars aligned to look 
  like one bar across the top of your screen. The left, fed by an xmonad 
  dynamicLogWithPP to show workspaces (with coloring and urgencyHooks), 
  the current layout, and the current window title. The right, fed by 

  %code conky -c ~/.dzen_conkyrc

  \ to show music, system stats and of course the time.

%p.note

  Many thanks go to moljac and lifeafter2am on the Arch forums. 
  They offered their xmonad.hs's to me and helped get me setup this way.

%h3 What it looks like

%p

  Full desktop:

%p

  %a!href="/static/screenshots/status.png"
    %img.fixed!src="/static/screenshots/status-thumb.png"!id="xmonad-status"!alt="XMonad Shot"

%p

  And With an urgencyHook notification (Workspace turns a different 
  color):

%p

  %a!href="/static/screenshots/status-urgency.png"
    %img.centered!src="/static/screenshots/status-urgency-thumb.png"!id="xmonad-urgent"!alt="XMonad Shot"

%p

  To achieve this, we set up a dynamicLog in xmonad.hs and adjust our 
  main function to output to this bar and also spawn our right bar as 
  fed by conky.

%p.note

  There are alot of other things going on in my status bars in those 
  screenshots. Things I'm not going to go into here. If you're 
  interested (and motivated), take a look at my 

  %a!href="/xmonad/docs/src/xmonad.html" xmonad.hs

  \ directly, and see if you can figure out what makes it happen.

%h3 Imports and the Main function

%p.note

  I'm going to showcase my custom Dzen module here, I think it makes 
  things easier. I have actual haddock documentation on the module 
  available 

  %a!href="/xmonad/docs/Dzen.html" here

  \ if you're interested. If you'd rather forgo my Dzen modules simply 
  replace all instances of 

  %code show someDzen
  
  \ with the literal string: 

  %code "dzen2 -options ..."

  \ and anything like 

  %code h &lt;- spawnDzen someDzen

  \ with 

  %code h &lt;- spawnPipe "dzen2 -options ..."

  \.

%p

  To use my dzen module, copy its source into 

  %code ~/.xmonad/lib/Dzen.hs
  
  \.

%p

  Your imports and main function will look like this:

#script
  %script!src="http://gist.github.com/629262.js"

%p

  Don't worry about the things we haven't defined yet, I'll get to 
  those.

%p

  The above does expect a file at 

  %code ~/.dzen_conkyrc

  \ to feed that right bar. You can find the one I use with my 

  %a!href="http://github.com/pbrisbin/dotfiles" dotfiles

  \.

%h3 Your LogHook

%p

  Your logHook will setup the output of workspaces, layouts, and titles 
  to dzen2. You can determine formatting, padding, shortening, etc. 

%p

  Here's a commented version of myLogHook which, hopefully, is illustrative 
  enough to not warrant further explanation.

#script
  %script!src="http://gist.github.com/629265.js"

%h3 Your Dzens

%p

  As I said, you can forego this part and just define your dzens as 
  literal text. Here's how to do it using my Dzen module:

#script
  %script!src="http://gist.github.com/629269.js"

%h3 No Overlap

%p

  The last thing you should do is add two little things to make sure you 
  leave a gap for the new statusbar:

#script
  %script!src="http://gist.github.com/629270.js"

%p

  Happy haskelling!
