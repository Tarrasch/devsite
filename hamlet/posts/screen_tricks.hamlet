%p

  Hopefully, if you're a CLI junky, you've heard of GNU/screen. And if 
  you've heard of it, chances are you're using it.

%p

  Screen is a terminal multiplexer. This means that you can start screen 
  in one terminal (say, your SSH connection) and open any number of 
  terminals 

  %em inside
  
  \ that terminal. This lets me have mutt, ncmpcpp, and a couple of 
  spare shells all open inside my single PuTTY window at work.

%p

  This is a great use of screen, but the benefits don't have to end 
  there.  When I'm not at work but at home, I can use screen to run 
  applications which I don't want to end if I want to change terminals, 
  log in and out, or even if all of X comes crashing down around me.

%p

  See, screen can 

  %em detach
  
  \ (default binding: 
  
  %kbd C-a d
  
  ). Better still, It will auto-detach if the terminal it's in crashes 
  or you logout. You can then re-attach it later, from any other ssh 
  session, tty, or X terminal.

%p

  This is great for apps like rtorrent and irssi, it's also great for 
  not losing any work if your ssh connection gets flaky. Just re-connect 
  and re-attach.

%p

  So now I have a dilemma. When I'm at work, I want to start screen and 
  get a few fresh tabs set up as I've defined in 

  %code ~/.screenrc
  
  : mutt, ncmpcpp, and three shells. But at home I 

  %em don't
  
  \ want those things to load, I instead want 

  %em only
  
  \ rtorrent or 
  
  %em only
  
  \ irssi to load up in the new screen window.

%p

  Furthermore, if rtorrent or irssi are already running in some detached 
  screen somewhere, I don't want to create an entirely new session, I'd 
  rather grab that one and re-attach it here.

%p

  The goal was to achieve this without changing the commands I run day 
  to day, affecting any current keybinds, or using any over complicated 
  scripts.

%p

  So, how do I do this as simply and easily as possible? Environment 
  variables.

%h3 How to do it

%p

  First we set up one main 

  %code ~/.screenrc
  
  \ which is always called. Then we set up a series of "screenrc 
  extensions" which 

  %em only
  
  \ load the apps in the screen session via a stanza of 

  %code screen -t &lt;name&gt; &lt;command&gt;
  
  \ lines.

%p

  Next, we dynamically choose which "screenrc extension" to source from 
  the main 

  %code ~/.screenrc
  
  \ via two environment variables which are either exported from 

  %code ~/.bashrc
  
  \ (the default) or explicitly set when running the command (the 
  specialized cases).

%p

  So, set up a 

  %code ~/.screenrc
  
  \ like this:

#script
  %script!src="http://gist.github.com/629202.js"

%p

  Now, how does screen know what "screenrc extension" to source? By 
  setting those variables up in 

  %code ~/.bashrc
  
  :

#script
  %script!src="http://gist.github.com/629204.js"

%p

  In a clean environment, screen will source that default 

  %code ~/.screen/configs/main
  
  , which will:

#script
  %script!src="http://gist.github.com/629206.js"

%p

  Why is this useful? Because, now I can do something like this:

%pre.white
  \
  \ SCREEN_CONF=rtorrent screen
  \

%p

  And screen will instead source that explicitly set 

  %code ~/.screen/configs/rtorrent
  
  \ which yields:

#script
  %script!src="http://gist.github.com/629207.js"

%p

  Et viola, no mutt or ncmpcpp, but rtorrent instead (same thing happens 
  with irssi).

%p

  Oh, but it gets better! Now we'll add some aliases to 

  %code ~/.bashrc

  \ to complete the whole thing:

#script
  %script!src="http://gist.github.com/629208.js"

%p

  Oh how beautiful, how simple, how easy. I type 

  %code rtorrent
  
  , what happens?

%p

  Screen checks for any running screens with session-name "rtorrent" and 
  re-attaches here and now. If none are found, screen opens a new screen 
  (using the rtorrent file) and names the session "rtorrent" so we can 
  -D -R it explicitly thereafter.

%p

  All of this happens for 

  %code irssi
  
  \ too, and can be used for any app (or multi-app setup) you want.

%p

  Pretty 
  
  %abbr!title="Keep it simple stupid" KISS
  
  \ if I do say so.
